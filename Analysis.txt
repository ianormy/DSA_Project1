This file contains an explanation of my run time analysis (Worst-Case Big-O Notation) for each solution
I have produced.

For all the tasks, n denotes the number of calls recorded. I have assumed that this is always more than
the number of texts recorded and for the worst case time estimation this is also denoted as n.

Task0
=====
To obtain the information required and then to print it would take the following time in the worst-case:

Indexing the items are O(1) each

Altogether that would become:

O(1)


Task1
=====
To obtain the information required and then to print it would take the following time in the worst-case:

* go through all the calls once to find the unique numbers - O(n)
* go through all the texts once to find the unique numbers - O(n)

Altogether that would become:

O(n)

Task2
=====
To obtain the information required and then to print it would take the following time in the worst-case:

* go through all the calls adding up the time taken sending and receiving calls - O(n)
* sort the dictionary in the order of highest duration to lowest - O(n log(n))
* take the first item in that list - O(1)

Altogether that would become:

O(n log(n))

Task3
=====
To obtain the information required and then to print it would take the following time in the worst-case:

Part A
* go through all the calls once to find the unique numbers - O(n)
* sort the list of unique numbers - O(n log(n))
* go through the list of sorted unique numbers printing them - O(n)
Part B
* go through all the calls once to find the percentage required - O(n)

Altogether that would become:

O(n + n log(n)) ~= O(n log(n))
since O(n log(n)) is longer than O(n)

Task4
=====
To obtain the information required and then to print it would take the following time in the worst-case:

* go through all the calls once to find the unique numbers - O(n)
* go through all the calls once to remove numbers that receive calls - O(n)
Total for that part: O(2n) ~= O(n)

* go through all the texts once to remove all numbers that send or receive texts - O(n)
Totals for that part: O(n)

* sort the remaining list of unique numbers - O(n log(n))
* Go through the remaining sorted list of unique numbers to print them off - O(n)

Altogether that would become:

O(n + n log(n)) ~= O(n log(n))
since O(n log(n)) is longer than O(n)
